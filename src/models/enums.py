import enum

class PlayerStatus(enum.Enum):
    """
    Represents the current status of a player character.
    """
    UNKNOWN = "unknown"            # Default or error state
    IDLE = "idle"                  # Player is in a safe area, not actively doing much
    EXPLORING = "exploring"        # Player is actively moving around, looking for content, default active state
    COMBAT = "combat"              # Player is engaged in combat
    DIALOGUE = "dialogue"          # Player is in a conversation with an NPC
    TRADING = "trading"            # Player is interacting with a shop or another player for trade
    MENU = "menu"                  # Player is interacting with a game menu (e.g., inventory, stats)
    AWAY = "away"                  # Player is AFK or otherwise temporarily inactive
    DEAD = "dead"                  # Player character is incapacitated
    AWAITING_MODERATION = "awaiting_moderation" # Player action requires GM approval
    TURN_ENDED_PENDING_RESOLUTION = "turn_ended_pending_resolution" # Player has submitted turn, waiting for guild-wide processing
    PROCESSING_GUILD_TURN = "processing_guild_turn" # Player's actions are part of active guild turn processing
    PROCESSING_ACTION = "processing_action"  # Player's individual action is being processed

class PartyTurnStatus(enum.Enum):
    """
    Represents the current turn status of a party in turn-based gameplay.
    """
    UNKNOWN = "unknown"            # Default or error state
    IDLE = "idle"                  # Party is not in active turn-based gameplay (e.g., exploring together)
    IN_COMBAT = "in_combat"          # Party is actively involved in a combat encounter
    AWAITING_PARTY_ACTION = "awaiting_party_action" # Party's turn, members deciding or leader to submit /end_party_turn
    TURN_ENDED_PENDING_RESOLUTION = "turn_ended_pending_resolution" # Party has submitted turn, waiting for guild-wide processing
    PROCESSING_GUILD_TURN = "processing_guild_turn" # Party's actions are part of active guild turn processing
    AWAITING_MODERATION = "awaiting_moderation" # Party actions/turn outcome requires GM approval (can be a sub-state or parallel)

class OwnerEntityType(enum.Enum):
    """
    Represents the type of entity that can own an inventory.
    """
    PLAYER = "PLAYER"
    GENERATED_NPC = "GENERATED_NPC"
    PARTY = "PARTY" # For shared party inventory
    LOCATION_CONTAINER = "LOCATION_CONTAINER" # E.g. a chest in a location
    # Add more types as needed, e.g., specific NPC types if they have separate table

class EventType(enum.Enum):
    """
    Represents the type of event that can be logged in the StoryLog.
    """
    PLAYER_ACTION = "player_action"         # A general action taken by a player
    NPC_ACTION = "npc_action"               # A general action taken by an NPC
    SYSTEM_EVENT = "system_event"           # Events generated by the game system (e.g., weather change)
    COMBAT_START = "combat_start"
    COMBAT_ACTION = "combat_action"         # Specific action within combat (attack, defend, ability use)
    COMBAT_END = "combat_end"
    MOVEMENT = "movement"                   # Player or NPC moved to a new location
    DIALOGUE_START = "dialogue_start"
    DIALOGUE_LINE = "dialogue_line"         # A line of dialogue spoken
    DIALOGUE_END = "dialogue_end"
    # Quest System Events (Task 39+)
    WORLD_EVENT_QUESTS_GENERATED = "world_event_quests_generated" # For Task 40
    QUEST_ACCEPTED = "quest_accepted"
    QUEST_STEP_COMPLETED = "quest_step_completed"
    QUEST_COMPLETED = "quest_completed"
    QUEST_FAILED = "quest_failed"
    ITEM_ACQUIRED = "item_acquired"
    ITEM_USED = "item_used"
    ITEM_DROPPED = "item_dropped"
    TRADE_INITIATED = "trade_initiated" # General event when trade process starts
    TRADE_COMPLETED = "trade_completed" # General event when a trade session ends (maybe not item specific)
    TRADE_ITEM_BOUGHT = "trade_item_bought" # Player bought an item
    TRADE_ITEM_SOLD = "trade_item_sold"   # Player sold an item
    # Consider more granular events for failures if needed by other systems, e.g., TRADE_BUY_FAILED_INSUFFICIENT_GOLD
    LEVEL_UP = "level_up"
    XP_GAINED = "xp_gained"
    RELATIONSHIP_CHANGE = "relationship_change"
    FACTION_CHANGE = "faction_change"       # Change in faction standing or membership
    WORLD_STATE_CHANGE = "world_state_change" # Significant change in the game world
    MASTER_COMMAND = "master_command"       # An action taken by a Game Master
    ERROR_EVENT = "error_event"             # For logging internal errors if necessary

    # Ability and Status Events
    ABILITY_USED = "ability_used"
    STATUS_APPLIED = "status_applied"
    STATUS_REMOVED = "status_removed" # For future use with remove_status

    # AI Orchestrator related
    AI_GENERATION_TRIGGERED = "ai_generation_triggered"
    AI_RESPONSE_RECEIVED = "ai_response_received"
    AI_CONTENT_VALIDATION_SUCCESS = "ai_content_validation_success"
    AI_CONTENT_VALIDATION_FAILED = "ai_content_validation_failed"
    AI_CONTENT_APPROVED = "ai_content_approved"
    AI_CONTENT_REJECTED = "ai_content_rejected"
    AI_CONTENT_EDITED = "ai_content_edited"
    AI_CONTENT_SAVED = "ai_content_saved"

    ATTRIBUTE_POINTS_SPENT = "attribute_points_spent" # Player spent points on attributes

    # World Generation / Map Management
    WORLD_EVENT_LOCATION_GENERATED = "world_event_location_generated" # AI generated
    MASTER_ACTION_LOCATION_ADDED = "master_action_location_added" # Master added
    MASTER_ACTION_LOCATION_REMOVED = "master_action_location_removed" # Master removed
    MASTER_ACTION_LOCATIONS_CONNECTED = "master_action_locations_connected" # Master connected
    MASTER_ACTION_LOCATIONS_DISCONNECTED = "master_action_locations_disconnected" # Master disconnected
    WORLD_EVENT_FACTIONS_GENERATED = "world_event_factions_generated" # AI generated factions and relationships
    WORLD_EVENT_ECONOMIC_ENTITIES_GENERATED = "world_event_economic_entities_generated" # Added for Task 43

    # Global Entity related events (Task 46)
    GLOBAL_ENTITY_MOVED = "global_entity_moved"
    GLOBAL_ENTITY_DETECTED_ENTITY = "global_entity_detected_entity"
    GLOBAL_ENTITY_ACTION = "global_entity_action" # General action by GE, details in json
    GE_TRIGGERED_DIALOGUE_PLACEHOLDER = "ge_triggered_dialogue_placeholder" # Placeholder for GE initiating dialogue


    # TODO: Add more event types as needed for other modules
    # e.g., QUEST_ACCEPTED, QUEST_STEP_COMPLETED, QUEST_COMPLETED, COMBAT_STARTED, COMBAT_ENDED, ITEM_CRAFTED, etc.

class RelationshipEntityType(enum.Enum):
    """
    Represents the types of entities that can be part of a relationship.
    """
    PLAYER = "player"
    PARTY = "party"
    GENERATED_NPC = "generated_npc"
    GENERATED_FACTION = "generated_faction"
    GLOBAL_NPC = "global_npc"        # Added for Task 46
    MOBILE_GROUP = "mobile_group"    # Added for Task 46
    # Consider if specific NPC types or other global entities need to be here

class QuestStatus(enum.Enum):
    """
    Represents the status of a player's progress on a quest.
    """
    NOT_STARTED = "not_started"    # Quest is available but not yet accepted by the player
    STARTED = "started"            # Player has accepted the quest, first step is active or about to be.
    IN_PROGRESS = "in_progress"    # Player is actively working on a step beyond the first. (Replaces ACTIVE)
    COMPLETED = "completed"        # Player has successfully finished all steps of the quest
    FAILED = "failed"              # Player has failed the quest
    ABANDONED = "abandoned"        # Player chose to abandon the quest
    # Add more statuses as needed, e.g., AWAITING_TURN_IN

# Example of how these might be used in a model:
# from sqlalchemy import Enum as SQLAlchemyEnum
# from sqlalchemy.orm import Mapped, mapped_column
# from .base import Base # Assuming Base is your declarative base
#
# class Player(Base):
#     __tablename__ = "players"
#     # ... other columns
#     status: Mapped[PlayerStatus] = mapped_column(SQLAlchemyEnum(PlayerStatus), default=PlayerStatus.IDLE)

# class Party(Base):
#     __tablename__ = "parties"
#     # ... other columns
#     turn_status: Mapped[PartyTurnStatus] = mapped_column(SQLAlchemyEnum(PartyTurnStatus), default=PartyTurnStatus.IDLE)

class ModerationStatus(enum.Enum):
    """
    Represents the moderation status of AI-generated content.
    """
    PENDING_MODERATION = "pending_moderation"
    APPROVED = "approved"
    REJECTED = "rejected"
    EDITED_PENDING_APPROVAL = "edited_pending_approval" # After a master edits it, needs re-approval
    VALIDATION_FAILED = "validation_failed" # Automated parsing/validation failed
    SAVED = "saved" # Successfully saved to game entities
    ERROR_ON_SAVE = "error_on_save" # An error occurred during the save_approved_generation step

class CombatStatus(enum.Enum):
    """
    Represents the status of an active combat encounter.
    """
    PENDING_START = "pending_start"      # Combat is initialized but not yet active (e.g., waiting for all participants)
    ACTIVE = "active"                  # Combat is ongoing
    PLAYER_TURN = "player_turn"          # It's a player's (or player-controlled party's) turn
    NPC_TURN = "npc_turn"                # It's an NPC's turn
    ENDED_VICTORY_PLAYERS = "ended_victory_players" # Players/Player-side won
    ENDED_VICTORY_NPCS = "ended_victory_npcs"     # NPCs/Opposing-side won
    ENDED_STALEMATE = "ended_stalemate"      # Combat ended without a clear victor (e.g., all fled, or by other rules)
    ENDED_ESCAPED = "ended_escaped"          # One or more sides escaped
    ERROR = "error"                    # An error occurred in combat processing

class CombatParticipantType(enum.Enum): # Added new Enum
    """Represents the type of a participant in combat."""
    PLAYER = "player"
    NPC = "npc"

class ConflictStatus(enum.Enum):
    """
    Represents the status of a pending conflict requiring resolution.
    """
    PENDING_MASTER_RESOLUTION = "pending_master_resolution" # Awaiting Game Master intervention
    RESOLVED_AUTOMATICALLY_CONTINUE = "resolved_automatically_continue" # Auto-resolved, action can proceed
    RESOLVED_AUTOMATICALLY_REJECT = "resolved_automatically_reject"   # Auto-resolved, action is rejected/failed
    RESOLVED_BY_MASTER_APPROVED = "resolved_by_master_approved"   # Master approved specific player's action or a custom resolution
    RESOLVED_BY_MASTER_REJECTED = "resolved_by_master_rejected"   # Master rejected the conflicting actions
    RESOLVED_BY_MASTER_DISMISS = "resolved_by_master_dismiss"     # Master dismissed the conflict (e.g., invalid, or handled out of band)
    RESOLVED_BY_MASTER_FAVOR_ACTION1 = "resolved_by_master_favor_action1" # Master explicitly chose action1
    RESOLVED_BY_MASTER_FAVOR_ACTION2 = "resolved_by_master_favor_action2" # Master explicitly chose action2
    RESOLVED_BY_MASTER_CUSTOM_ACTION = "resolved_by_master_custom_action" # Master defined a custom outcome
    EXPIRED = "expired"                                     # Conflict resolution timed out (future use)
    SIMULATED_INTERNAL_CONFLICT = "simulated_internal_conflict" # For conflicts detected by simulation tools, not persisted

class StatusEffectCategory(enum.Enum):
    """
    Represents the category of a status effect.
    """
    BUFF = "buff"
    DEBUFF = "debuff"
    NEUTRAL = "neutral"

import logging
logger = logging.getLogger(__name__)
logger.info("Game-specific Enums (PlayerStatus, PartyTurnStatus, OwnerEntityType, ModerationStatus, ConflictStatus, etc.) defined.")
