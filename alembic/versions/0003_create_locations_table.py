"""Create locations table

Revision ID: 0003
Revises: 0002
Create Date: YYYY-MM-DD HH:MM:SS.SSSSSS

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# Import LocationType from your models to ensure Enum is available for SAEnum
# Adjust path as necessary if your Alembic env doesn't see src directly
try:
    from src.models.location import LocationType
except ImportError:
    # Fallback for environments where src might not be in PYTHONPATH directly for Alembic
    # This assumes alembic/env.py correctly adds src to sys.path
    # For direct execution of alembic CLI, this might be needed.
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).resolve().parents[2])) # Adds project root to path
    from src.models.location import LocationType


# revision identifiers, used by Alembic.
revision: str = '0003'
down_revision: Union[str, None] = '0002'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('locations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('guild_id', sa.BigInteger(), nullable=False),
    sa.Column('static_id', sa.Text(), nullable=True),
    sa.Column('name_i18n', sa.JSON(), nullable=False, server_default=sa.text("'{}'::jsonb")),
    sa.Column('descriptions_i18n', sa.JSON(), nullable=False, server_default=sa.text("'{}'::jsonb")),
    sa.Column('type', sa.Enum('GENERIC', 'TOWN', 'CITY', 'VILLAGE', 'FOREST', 'MOUNTAIN', 'CAVE', 'DUNGEON', 'SHOP', 'TAVERN', 'ROAD', 'PORT', name='locationtype'), nullable=False, server_default=LocationType.GENERIC.value),
    sa.Column('coordinates_json', sa.JSON(), nullable=True),
    sa.Column('neighbor_locations_json', sa.JSON(), nullable=True),
    sa.Column('generated_details_json', sa.JSON(), nullable=True),
    sa.Column('ai_metadata_json', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_locations_guild_id'), 'locations', ['guild_id'], unique=False)
    op.create_index(op.f('ix_locations_id'), 'locations', ['id'], unique=False)
    op.create_index(op.f('ix_locations_static_id'), 'locations', ['static_id'], unique=False) # Index for static_id queries
    op.create_index('ix_locations_guild_id_static_id', 'locations', ['guild_id', 'static_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_locations_guild_id_static_id', table_name='locations')
    op.drop_index(op.f('ix_locations_static_id'), table_name='locations')
    op.drop_index(op.f('ix_locations_id'), table_name='locations')
    op.drop_index(op.f('ix_locations_guild_id'), table_name='locations')
    op.drop_table('locations')

    # Drop the Enum type if it was created by SQLAlchemy
    # This needs to match the name SQLAlchemy uses for the type in the database.
    # For PostgreSQL, it's usually the lowercased version of the Enum name.
    sa.Enum(name='locationtype').drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
