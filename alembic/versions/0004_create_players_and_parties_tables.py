"""Create players and parties tables

Revision ID: 0004
Revises: 0003
Create Date: YYYY-MM-DD HH:MM:SS.SSSSSS

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# It's good practice to ensure enums are available for migrations
# Adjust path as necessary if your Alembic env doesn't see src directly
try:
    from src.models.enums import PlayerStatus, PartyTurnStatus
except ImportError:
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).resolve().parents[2])) # Adds project root
    from src.models.enums import PlayerStatus, PartyTurnStatus

# revision identifiers, used by Alembic.
revision: str = '0004'
down_revision: Union[str, None] = '0003'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First, create the ENUM types if they don't exist (PostgreSQL specific)
    player_status_enum = sa.Enum(PlayerStatus, name='player_status_enum', create_constraint=True)
    player_status_enum.create(op.get_bind(), checkfirst=True)

    party_turn_status_enum = sa.Enum(PartyTurnStatus, name='party_turn_status_enum', create_constraint=True)
    party_turn_status_enum.create(op.get_bind(), checkfirst=True)

    # Create parties table (referenced by players.current_party_id)
    op.create_table('parties',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('guild_id', sa.BigInteger(), nullable=False),
        sa.Column('name', sa.Text(), nullable=False),
        sa.Column('player_ids_json', sa.JSON(), nullable=True),
        sa.Column('current_location_id', sa.Integer(), nullable=True),
        sa.Column('turn_status', party_turn_status_enum, nullable=False, server_default=PartyTurnStatus.IDLE.value),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.id'], name=op.f('fk_parties_guild_id_guild_configs'), ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['current_location_id'], ['locations.id'], name=op.f('fk_parties_current_location_id_locations')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_parties'))
    )
    op.create_index(op.f('ix_parties_guild_id'), 'parties', ['guild_id'], unique=False)
    op.create_index(op.f('ix_parties_id'), 'parties', ['id'], unique=False)
    op.create_index(op.f('ix_parties_current_location_id'), 'parties', ['current_location_id'], unique=False)


    # Create players table
    op.create_table('players',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('guild_id', sa.BigInteger(), nullable=False),
        sa.Column('discord_id', sa.BigInteger(), nullable=False),
        sa.Column('name', sa.Text(), nullable=False),
        sa.Column('current_location_id', sa.Integer(), nullable=True),
        sa.Column('selected_language', sa.Text(), nullable=True, server_default='en'),
        sa.Column('xp', sa.Integer(), nullable=False, server_default=sa.text('0')),
        sa.Column('level', sa.Integer(), nullable=False, server_default=sa.text('1')),
        sa.Column('unspent_xp', sa.Integer(), nullable=False, server_default=sa.text('0')),
        sa.Column('gold', sa.Integer(), nullable=False, server_default=sa.text('0')),
        sa.Column('current_status', player_status_enum, nullable=False, server_default=PlayerStatus.IDLE.value),
        sa.Column('collected_actions_json', sa.JSON(), nullable=True),
        sa.Column('current_party_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['guild_id'], ['guild_configs.id'], name=op.f('fk_players_guild_id_guild_configs'), ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['current_location_id'], ['locations.id'], name=op.f('fk_players_current_location_id_locations')),
        sa.ForeignKeyConstraint(['current_party_id'], ['parties.id'], name=op.f('fk_players_current_party_id_parties')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_players')),
        sa.UniqueConstraint('guild_id', 'discord_id', name=op.f('uq_players_guild_discord'))
    )
    op.create_index(op.f('ix_players_discord_id'), 'players', ['discord_id'], unique=False)
    op.create_index(op.f('ix_players_guild_id'), 'players', ['guild_id'], unique=False)
    op.create_index(op.f('ix_players_id'), 'players', ['id'], unique=False)
    op.create_index(op.f('ix_players_current_location_id'), 'players', ['current_location_id'], unique=False)
    op.create_index(op.f('ix_players_current_party_id'), 'players', ['current_party_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('players')
    op.drop_table('parties')

    # Drop the ENUM types (PostgreSQL specific)
    sa.Enum(name='player_status_enum').drop(op.get_bind(), checkfirst=True)
    sa.Enum(name='party_turn_status_enum').drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
