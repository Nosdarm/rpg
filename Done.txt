üîß 0.1 Discord Bot Project Initialization and Basic Guild Integration.
Description: Set up the Python project structure using the chosen asynchronous framework. Initialize integration with the Discord API, handle basic Discord events (on_ready, on_message, on_guild_join, on_guild_remove). Configure logging. Implement utility commands (e.g., /ping).
Result: Basic working Discord bot, configured for multiple guilds, logging, language system (language system part will be addressed in later tasks).

Key achievements for this task:
- Project structure created (src, tests, config, bot directories).
- Core files created: main.py, bot/core.py, bot/events.py, bot/commands.py, config/settings.py, requirements.txt, .gitignore.
- BotCore class implemented with setup_hook for loading cogs.
- EventCog implemented with on_ready, on_message, on_guild_join, on_guild_remove, on_command_error handlers.
- CommandCog implemented with a /ping command.
- Logging configured, level settable via environment variable.
- Basic .env file structure mentioned in settings.py.
- requirements.txt includes discord.py and python-dotenv.

---

üíæ 0.2 DBMS Setup and Database Model Definition with Guild ID.
Description: Select a scalable DBMS (PostgreSQL/MySQL) and ORM. Define the structure of all data models in the DB. Crucial: All models storing game data specific to a particular guild MUST INCLUDE a guild_id field (BIGINT, Indexed) as part of a composite key or FK to GuildConfig). (Field details are in task descriptions where these models are detailed: Player, Location, WorldState, Party, GeneratedNpc, GeneratedFaction, GeneratedQuest, Item, Inventory, Log, Relationship, PlayerNpcMemory, RuleConfig, Ability, Skill, Status, ItemProperty, Questline, QuestStep, MobileGroup, CraftingRecipe). Text fields - JSONB (_i18n).
Implement the GuildConfig model: id (PK, BIGINT - the Discord guild's ID itself), master_channel_id (BIGINT), system_channel_id (BIGINT), notification_channel_id (BIGINT, for moderation/conflict notifications), main_language (TEXT).
Configure ORM and migrations.
Result: DB schema is ready for full data isolation by guild and storing all types of game data with multilingual support.

Key achievements for this task:
- Defined `Base` model and `GuildConfig` model using SQLAlchemy in `src/models/`.
- Added `SQLAlchemy`, `asyncpg`, `alembic` to `requirements.txt`.
- Configured database connection settings (`DATABASE_URL`) in `src/config/settings.py`.
- Created `src/core/database.py` with async engine, session factory, and `init_db` / `get_db_session` functions.
- Integrated `init_db` into `main.py` for initial table creation.
- Initialized and configured Alembic for database migrations:
    - `alembic.ini` and `alembic/env.py` modified for project structure and async operations.
    - First migration for `GuildConfig` created (manually due to sandbox limitations).
- Project is now set up for database interaction with PostgreSQL using SQLAlchemy and Alembic.

---

üîß 0.3 Basic DB Interaction Utilities and Rule Configuration Access (Guild-Aware).
Description: Implement low-level functions for working with the DB that always operate within the context of the specified guild.
Implement utilities for managing ORM sessions (get_db_session). Implement decorators or context managers for managing ORM TRANSACTIONS (@transactional(guild_id)). These transactions MUST operate ONLY WITH DATA WITHIN THE SPECIFIED guild_id.
Implement CRUD utilities (get_entity_by_id, create_entity, update_entity, delete_entity) for ALL models. These utilities MUST accept guild_id as the FIRST mandatory parameter and AUTOMATICALLY add the condition WHERE guild_id = :guild_id to queries.
Implement the load_rules_config(guild_id: int) -> dict utility: Loads all RuleConfig records (0.2) for the specified guild and forms a rules dictionary. Caches this dictionary per-guild in the bot process memory.
Implement the get_rule(guild_id: int, key: str) -> Any utility: Retrieves a rule parameter FROM THE CACHE for the specified guild by key. Handle errors.
Implement the update_rule_config(guild_id: int, key: str, value: Any) utility: Updates the RuleConfig in the DB for the specified guild. After successful saving, updates the cache for this guild (load_rules_config).
Result: A set of utilities for reliable, secure (guild-isolated) DB data access and configurable rules.

Key achievements for this task:
- Defined `RuleConfig` model in `src/models/rule_config.py` with `guild_id`, `key`, `value_json` and unique constraint on `(guild_id, key)`.
- Created Alembic migration `0002_create_rule_configs_table.py` for `RuleConfig`.
- Implemented `@transactional` decorator in `src/core/database.py` for managing DB transaction lifecycle using `get_db_session`.
- Created `src/core/crud.py` with:
    - `CRUDBase` generic class for common CRUD operations.
    - Generic functions `create_entity`, `get_entity_by_id`, `update_entity`, `delete_entity` that are guild-aware.
- Created `src/core/rules.py` with:
    - `load_rules_config_for_guild`: Loads all rules for a guild into an in-memory cache (`_rules_cache`).
    - `get_rule`: Retrieves a rule from cache (or loads if not present).
    - `update_rule_config`: Updates/creates a rule in DB and refreshes the guild's cache.
    - `get_all_rules_for_guild`: Retrieves all rules for a guild from cache.
- Updated `src/models/__init__.py` and `src/core/__init__.py` to include new modules and models.

---

üåç 1.1 Location Model (i18n, Guild-Scoped). (0.2)
Description: Define the location model in the DB, linked to a guild, with multilingual support and relationships. This model will store both static and generated location details.
Implement the Location model (0.2) with fields: id (PK, INTEGER), guild_id (BIGINT, Indexed, FK to GuildConfig), static_id (TEXT, unique within the guild), name_i18n (JSONB - for static or primary generated name), descriptions_i18n (JSONB - for static or primary generated description), type (TEXT enum), coordinates_json (JSONB), neighbor_locations_json (JSONB - list of {location_id: connection_type_i18n}), generated_details_json (JSONB - additional generated descriptive details), ai_metadata_json (JSONB - for AI generation).
Populate the DB with static data during on_guild_join (0.1). World Lore is also stored in the DB (e.g., in WorldState or a separate table), linked to the guild.
Utilities get_location(guild_id, location_id), get_static_location_id(guild_id, static_id). A utility to get localized location/lore text (using _i18n fields and fallback languages 0.1).
Result: Location model defined, static data accessible and isolated.

Key achievements for this task:
- Defined `Location` model and `LocationType` enum in `src/models/location.py`.
- Created Alembic migration `0003_create_locations_table.py` for `Location`.
- Implemented `CRUDLocation` in `src/core/crud/crud_location.py` with specific finders.
- Implemented `get_location`, `get_location_by_static_id`, and `get_localized_text` utilities in `src/core/locations_utils.py`.
- Updated `on_guild_join` in `src/bot/events.py` to create `GuildConfig` and default static locations for new guilds.
- Updated `__init__.py` files in `src/models`, `src/core`, and `src/core/crud` to include new modules/models.
