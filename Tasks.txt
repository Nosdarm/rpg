Project: AI-Driven Text RPG Bot - Backend Technical Specification (FINAL VERSION with AI CONTEXT MANAGEMENT VIA UI)
Overall Project Context: This is a scalable backend service for a Discord bot supporting numerous independent RPG worlds (per guild). The world is procedurally generated by AI (OpenAI API) and managed by a system of game mechanics (combat, quests, dialogues) based on configurable rules. All data is persistently stored in a scalable DB, isolated for each guild. Multilingual support (RU/EN), NLU input, a Turn System, and Master tools allowing manual situation resolution are supported.

Decomposed Backend Development Task List (For AI Agent - Autonomous Tasks)

Phase 0: Architecture and Initialization (Foundation MVP)

(Task 0.3 moved to Done.txt)

🌍 Phase 1: Game World (Static & Generated)
{Task 1.1 Location Model (i18n, Guild-Scoped) - Moved to Done.txt}
{Task 1.2 Player and Party System (ORM, Commands, Guild-Scoped) - Moved to Done.txt}
{Task 1.3 Movement Logic - Moved to Done.txt}

🧠 Phase 2: AI Integration - Generation Core

{Task 2.3 AI Response Parsing and Validation Module - Moved to Done.txt}

{Task 2.6 AI Generation, Moderation, and Saving Logic - Moved to Done.txt}



🎲 Phase 6: Action Resolution Systems (Core Mechanics)
{Task 🎲 6.3.1 Dice Roller Module. (None) - Moved to Done.txt}

{Task 🎲 6.3.2 Check Resolver Module. (14, 0.3, 11, 47) - Moved to Done.txt}

{Task ⚙️ 6.11 Central Collected Actions Processing Module (Turn Processor) - Guild-Scoped Execution. (1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 19, 20, 21, 25, 26, 27, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 48, 50, 52, 53, 54) - Moved to Done.txt}

{Task ⚙️ 6.1.1 Intra-Location Interaction Handler Module. (15, 4.1, 0.3, 15, 12, 21, 35, Rules 13/41) - Moved to Done.txt}


Task Block: Phase 3: Abilities and Checks Mechanics
This block presents tasks related to defining and using abilities, statuses, and attribute/skill check mechanics.

{Task 20: 🧠 3.1 Ability Model (i18n, Guild-Scoped) - Moved to Done.txt}

{Task 21: 🧠 3.2 Entity Status Model (Status Effects, i18n, Guild-Scoped) - Moved to Done.txt}

{Task 22: 🧠 3.3 API for Activating Abilities and Applying Statuses (Guild-Scoped) - Moved to Done.txt}

Task Block: Phase 4: World and Location Model
This block presents tasks related to defining and managing locations and the world map.

{Task 25: 🗺️ 4.3 Location Transitions (Guild-Scoped) - Moved to Done.txt}

Task Block: Phase 5: Combat System
This block presents tasks related to combat mechanics.

{Task 27: ⚔️ 5.2 Combat Engine Module. - Moved to Done.txt}

{Task 28: ⚔️ 5.3 NPC Combat Strategy Module (AI). - Moved to Done.txt}

{Task 29: ⚔️ 5.4 Combat Cycle Refactoring (Multiplayer Combat State Machine). - Moved to Done.txt}

Task Block: Phase 13: Experience and Character Development System
This block presents tasks related to character experience, leveling up, and attribute distribution.
Within an ATOMIC TRANSACTION (0.3), SCOPED TO THIS GUILD: Creates a CombatEncounter record (24) with this guild_id and a link to the location. Loads participants by guild_id (1.2/5/14), populates participants_json. Determines initiative (via 12 based on rules 13/41). Copies combat rules from RuleConfig into rules_config_snapshot_json. Sets participant status to 'combat'. Logs (19).
Returns the created CombatEncounter.


API process_combat_turn(guild_id: int, combat_id: int): Called by the Turn Module (14) to process one combat turn.
Loads combat (24) by guild_id. Determines the active participant.
If it's a player/party turn: The Turn Module (14/21) awaits player input, recognizes combat action (13/21), and passes it to this module (29). If there's a party action conflict, 21 has already resolved it. Calls 25 (Combat Engine) with guild_id and the action.
If it's an NPC turn: Calls 26 (AI Strategy) with guild_id to get an action. Calls 25 with this action.
After EACH action in combat: Logs the action result (from 25) to the general log (19) and the combat log (24). Updates participant states in the DB (0.3/14/15) (these updates are done within the transaction in 25).
Output feedback (47) in the player's language.
Check for combat conclusion. Remove 'combat' status.
Handle Combat End Consequences:
XP: Calls 30 (XP System). Awarding according to rules 13/41 AMONG COMBAT PARTICIPANTS (in this guild) based on distribution rules 13/41.
Loot: Generated (according to rules 13/41, can use Item/ItemProperty 42, Context 16) or taken from defeated NPC inventories (15). Distributed AMONG VICTORS WITHIN THE PARTY (or placed in the location) according to rules 13/41. Optionally - trigger manual moderation (47) for rare loot distribution.
WS/Relationships: Update WorldState (36) / Relationships (36) according to rules 13/41 (on behalf of the player/party who killed opponents).
Quest Progress (36/39): Completion of combat-related steps.





Task Block: Phase 13: Experience and Character Development System
This block presents tasks related to character experience, leveling up, and attribute distribution.

{Task 30: ⚡️ 13.1 Experience System Structure (Rules). - Moved to Done.txt}
{Task 31: ⚡️ 13.2 XP Awarding and Progress. - Moved to Done.txt}
{Task 32: ⚡️ 13.3 Applying Level Up (Multy-i18n). - Moved to Done.txt}

Task Block: Phase 8: Factions, Relationships, and Social Mechanics
This block presents tasks related to factions, relationships between entities, and their influence on gameplay.

{Task 33: 🎭 8.1 Factions Model (Guild-Scoped, i18n). - Moved to Done.txt}

{Task 34: 🎭 8.2 Relationships Model (Guild-Scoped). - Moved to Done.txt}
{Task 35: 🎭 8.3 AI Generation of Factions and Relationships (Multilang, Per Guild). - Moved to Done.txt}
{Task 36: 🎭 8.4 Relationship Changes Through Actions (According to Rules, Guild-Scoped). - Moved to Done.txt}
{Task 37: 🎭 8.5 Relationship Influence (Full, According to Rules, Multy-i18n). - Moved to Done.txt}
{Task 38: 🎭 8.6 Complex Internal Faction Relationships. - Moved to Done.txt}

Task Block: Phase 9: Detailed Quest System with Consequences
This block presents tasks for implementing a comprehensive quest system with steps, consequences, and links to other mechanics.

{Task 39: 📚 9.1 Quest and Step Structure (Guild-Scoped, i18n). - Moved to Done.txt}

{Task 40: 🧬 9.2 AI Quest Generation (According to Rules, Multilang, Per Guild). - Moved to Done.txt}
Description: AI generates quests for a specific guild according to rules.
Called from 10 (Generation Cycle). AI (16/17) is prompted to generate according to structure 39 based on RuleConfig rules (13/0.3) FOR THIS GUILD, including rules for steps and consequences. Request generation of required_mechanics_json and abstract_goal_json (according to rules 13/41) and consequences_json (according to rules 13/41). Texts should be i18n. Entities get guild_id.

{Task 41: 📚 9.3 Quest Tracking and Completion System (Guild-Scoped). - Moved to Done.txt}

Task Block: Phase 10: Economy, Items, and Trade
This block presents tasks related to economy, items, and trade mechanics.

{Task 42: 💰 10.1 Data Structure (Guild-Scoped, i18n). - Moved to Done.txt}

{Task 44: 💰 10.3 Trade System (Guild-Scoped). - Moved to Done.txt}

Task Block: Phase 14: Global Entities and Dynamic World
This block presents tasks related to entities that move around the world independently of players (caravans, patrols, random NPCs), and their simulation.

{Task 45: 🌌 14.1 Global Entity Models (Guild-Scoped, i18n). - Moved to Done.txt}

{Task 46: 🧬 14.2 Global Entity Management (Per-Guild Iteration). - Moved to Done.txt}



Task Block: Phase 15: Management and Monitoring Tools
This block presents tasks for implementing tools for the game Master.

{Task 47: 🛠️ 15.1 Master Command System. - Moved to Done.txt}

Task 48: 🛠️ 15.2 Balance and Testing Tools (Per Guild).
Description: Simulators and analyzers for the Master, operating within the guild context according to rules.
Simulation APIs (Combat 27, Checks 12, Conflicts 21). REQUIRE guild_id. Use data and rules FOR THIS GUILD.
AI generation analyzers (18): Check the quality and balance of generated content against rules 13/41.
Results are output in the Master's language (49).
Note: Partially completed. Real AI call for analyzer, basic combat dry run, and minor analyzer extensions implemented (2024-07-19). In-depth conflict simulation remains a deferred task.

Task Block: Phase 11: Dynamic Dialogue and NPC Memory
This block presents tasks related to dynamic NPC dialogues using LLM and storing interaction history.

Task 50: 🧠 11.1 Dialogue Generation Module (LLM, Multy-i18n, According to Rules).
Description: Prepare the prompt for the LLM to generate NPC dialogue lines.
API generate_npc_dialogue(guild_id: int, context: dict) -> str. REQUIRES guild_id. Called from 46 (Dialogue Module).
Prompt context: WorldState (36), Global Entities (40), NPC profile (data 1.2/14, current relationships 30/31/32, memory 52), Player/Party profile (1.2/5), Quest context (39) if related, dialogue rules (checks, influence) from RuleConfig 13/0.3. Player input text (from 46).
LLM Request: Generate a line IN THE PLAYER'S LANGUAGE (0.1/0.2), relevant to the context, character, relationship. Use i18n names of entities (from DB 4/7/14/39) FOR THIS GUILD.

Task 51: 🧠 11.2 Dialogue Context and Status (Guild-Scoped).
Description: Implement logic for managing the state of a dialogue session for a player/party.
API start_dialogue(guild_id: int, player_id: int, target_npc_id: int). Called from 21 (Action Processing Module) or a command. Sets player(s) status to 'dialogue' (0.2/1.1). Creates a temporary dialogue record.
API handle_dialogue_input(guild_id: int, player_id: int, message_text: str) -> dict. Called FROM 21 (Action Processing Module) upon receiving text from a player in 'dialogue' status. Processes the text as a line, calls 50 to generate the NPC response.
API end_dialogue(guild_id: int, player_id: int). Removes 'dialogue' status.

Task 52: 🧠 11.3 NPC Memory Management (Persistent, Per Guild).
Description: Storing NPC interaction history with players/parties. (Renamed from 11.4, moved from 47).
Implement PlayerNpcMemory/PartyNpcMemory models (0.2/7). BOTH INCLUDE guild_id. Utilities require guild_id.
API add_to_npc_memory(guild_id: int, player_id/party_id, npc_id, event_type: str, details: dict). Called by other modules upon significant events (dialogue 46, quest 41, combat 27, relationship change 31).
Utility get_npc_memory(guild_id: int, player_id/party_id, npc_id) -> List[MemoryEntry]: Loads memory for this NPC and Player/Party IN THIS GUILD. Used in 50 (for LLM context).

Task 53: 🧠 11.4 NLU and Intent Recognition in Dialogue (Guild-Scoped).
Description: Processing player input in dialogue mode. This is part of module 13 (NLU) logic.
If player status is 'dialogue', NLU (13) does not save the action to collected_actions_json, but passes it directly to the Dialogue Management Module (46) via the handle_dialogue_input API (46). NLU (13) still recognizes Intents/Entities and passes them to 46.

Task Block: Phase UI (User Interface)
This block presents tasks related to developing a separate client application (web or desktop) that will provide a convenient graphical interface for the Game Master and potentially players, interacting with the backend API.

Task 55: 🖥️ UI.1 UI Technology Stack Selection and Basic Structure. (None)
* Description: Select a framework/library for developing the client UI application (e.g., React, Vue for web; Electron, PyQt for desktop). Define the basic architecture of the UI application (components, routing, state management).
* Result: Technology stack selected, basic UI project framework created.

Task 56: 🖥️ UI.2 Basic UI Structure and Authentication Development. (Depends on 0.1 - Discord API/OAuth2?)
* Description: Create the main structure of the UI application (navigation, page layouts). Implement a UI user authentication system (e.g., via Discord OAuth2 to link to the Master's Discord account). Implement selection of the guild the Master is working with in the current UI session. The UI must store the Guild ID and automatically pass it in all subsequent requests to the backend API.
* Result: A working UI login and guild selection system, ready for page development.

Task 57: 🖥️ UI.3 UI for Player and Character Management. (Depends on API 1.3)
* Description: Create UI pages for viewing lists of players and characters for the selected guild. Implement functionality for displaying data (using API 1.3 for reading). Implement forms for creating, editing, and deleting Player and GeneratedNpc records (calling API 1.3 for create/update/delete). The UI must correctly handle i18n fields for displaying and editing texts in different languages.
* Result: Interface for managing players and characters via UI.

Task 58: 🖥️ UI.4 UI for Rule Configuration (RuleConfig). (Depends on API 41)
* Description: Create a UI page for viewing and editing game rules (RuleConfig) for the selected guild.
* Load the rule structure (from 13/0.3) and current values (via API 41, e.g., /master view_rules or a dedicated RuleConfig API). Display the rule structure in a convenient format (e.g., JSON tree structure).
* Implement user-friendly controls (forms, input fields, sliders, dropdowns) for editing various types of rule parameters (numbers, strings, booleans, JSON).
* Implement a save button for changes (calling the RuleConfig editing API 41).
* Result: Graphical interface for configuring game rules by the Master.

Task 59: 🖥️ UI.5 UI for AI Generation and Moderation. (Depends on API 10)
* Description: Create a UI page for managing AI generation and moderation.
* Implement controls for triggering AI generation (calling API 10 trigger_location_generation). Ability to specify generation parameters (location, type).
* Display a list of pending moderation requests for this guild (via API 41, e.g., /master review_ai).
* Upon selecting a pending request: Display the generated content (NPCs, quests, items, descriptions) in a readable format (using API 47 for formatting or getting data directly from 18 ai_data_json). Display validation issues (from issues_json 18).
* Implement "Approve", "Reject", "Edit" buttons (calling corresponding API 41). Editing should allow modifying entity fields in the pending request, including _i18n texts.
* Result: Graphical interface for managing AI content generation and moderation.

Task 60: 🖥️ UI.6 UI for Inventory and Item Management. (Depends on API 15, 42)
* Description: Create UI pages for viewing and editing character/NPC inventories and the general list of items in the guild.
* Interface for viewing the inventory of a selected character/NPC (calling API 15 get_player_inventory or similar for NPCs). Display items with their details (properties, i18n descriptions).
* Interface for viewing/editing the list of all items in the guild (calling CRUD API 41 for the Item model 42). Implement forms for creating/editing Items, including _i18n names/descriptions.
* Ability to move items between inventories via UI (calling API 15 add/remove).
* Result: Graphical interface for managing inventory and items in the guild.

Task 61: 🖥️ UI.7 UI for Faction and Relationship Management. (Depends on API 20, 21)
* Description: Create UI pages for managing factions and relationships.
* Interface for viewing/editing the list of factions (calling CRUD API 41 for the GeneratedFaction model 20). Forms for editing factions (including _i18n).
* Interface for viewing/editing the list of relationships (calling CRUD API 41 for the Relationship model 21). Display relationships between entities in the guild, forms for changing them. Possibly a visual representation of relationships.
* Result: Graphical interface for managing factions and relationships.

Task 62: 🖥️ UI.8 UI for Quest Management. (Depends on API 39)
* Description: Create UI pages for managing quests.
* Interface for viewing the list of all quests in the guild (calling CRUD API 41 for GeneratedQuest 39).
* Interface for viewing/editing quest details, including steps, requirements (required_mechanics_json), abstract goals (abstract_goal_json), consequences (consequences_json). Convenient forms for editing these JSON structures. Editing _i18n texts.
* Interface for tracking quest progress for players/parties.
* Result: Graphical interface for managing quests in the guild.

Task 63: 🖥️ UI.9 UI for Global Entity Management. (Depends on API 45)
* Description: Create UI pages for managing global entities.
* Interface for viewing/editing the list of Global Entities (MobileGroup, GlobalNpc, GlobalEvent) in the guild (calling CRUD API 41 for models 45).
* Display their state, routes, goals. Forms for editing.

Task 64: 🖥️ UI.10 UI for Monitoring and Logging. (Depends on API 43)
* Description: Create UI pages for monitoring game state and viewing logs.
* Interface for viewing WorldState (API 43).
* Interface for viewing the event log (API 43). Implement filtering and pagination for the log. Format log entries (API 47) for display.
* Possibly, visualization of the guild map (based on Location data 4.1). Display the position of players, parties, global entities.

Task 65: 🖥️ UI.11 UI for Balance Tools. (Depends on API 48)
* Description: Create UI pages for accessing balance and testing tools.
* Interfaces for running simulations (combat, checks, conflicts - calling API 48) with configurable parameters. Display simulation results.
* Display reports from the AI analyzer (API 48).

Task 66: 🖥️ UI.12 UI for Conflict Resolution. (Depends on API 41)
* Description: Create a UI page for manual resolution of conflict actions.
* Display a list of pending conflicts for this guild (loading PendingConflict records via API 41).
* Upon selecting a conflict: Display conflict details (player actions, conflict type) in a readable format.
* Provide controls (buttons, dropdown list) for selecting the conflict outcome (based on master_outcome_types from RuleConfig 13/41).
* "Resolve" button (calling API 41 master_resolve_conflict).

Task 67: 🖥️ UI.13 Backend API for Command List. (Depends on 0.1)
* Description: Develop a backend API endpoint that provides structured information about bot commands.
* Implement an API endpoint (e.g., /api/commands). Loads the list of all available Discord bot commands (from the Discord API via the bot library). For each command: get name, description, parameters, permissions.
* The API should return information in the bot's language (guild's) or support requesting information in a specific language.
* Result: Backend API for retrieving command data.

Task 68: 🖥️ UI.14 UI "Command List" Section (Help/Guide). (Depends on API 67)
* Description: In the UI, create a section for displaying the list of commands.
* Load the list of commands via API 67. Display it in a readable format (table, list). Present command descriptions and parameters.
* Result: A command help section appears in the UI.
